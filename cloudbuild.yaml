# Google Cloud Build 設定ファイル
# Android アプリのビルドと Google Play への自動デプロイ
# 完全自動化対応版

substitutions:
  _KEYSTORE_PATH: 'release.keystore'
  _KEY_ALIAS: 'app-release'
  _PACKAGE_NAME: 'com.positive.converter'
  _PLAY_TRACK: 'internal'

steps:
  # 1. キーストアをSecret Managerから取得
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud secrets versions access latest \
          --secret="android-keystore" \
          --format='get(payload.data)' | base64 -d > ${_KEYSTORE_PATH}

  # 2. gradle.properties を生成
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cat > gradle.properties << EOF
        KEYSTORE_PATH=../${_KEYSTORE_PATH}
        KEY_ALIAS=${_KEY_ALIAS}
        KEY_PASSWORD=$$KEY_PASSWORD
        KEYSTORE_PASSWORD=$$KEYSTORE_PASSWORD
        EOF
    secretEnv: ['KEY_PASSWORD', 'KEYSTORE_PASSWORD']

  # 3. google-services.json をSecret Managerから取得
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud secrets versions access latest \
          --secret="google-services-json" \
          --format='get(payload.data)' | base64 -d > app/google-services.json

  # 4. Androidアプリをビルド
  - name: 'gcr.io/cloud-builders/gradle:7.6.0-jdk17'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        ./gradlew clean
        ./gradlew bundleRelease
        ./gradlew assembleRelease

  # 5. Firebase App Distribution でテスト配布（オプション）
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$BRANCH_NAME" = "develop" ]; then
          apt-get update && apt-get install -y nodejs npm
          npm install -g firebase-tools
          firebase appdistribution:distribute \
            app/build/outputs/apk/release/app-release.apk \
            --app $${FIREBASE_APP_ID} \
            --release-notes "Build ${SHORT_SHA} from ${BRANCH_NAME}" \
            --groups "internal-testers"
        fi
    secretEnv: ['FIREBASE_APP_ID']

  # 6. Google Play にアップロード（mainブランチのみ）
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$BRANCH_NAME" = "main" ]; then
          # Google Play Developer API を使用してアップロード
          pip3 install google-api-python-client
          python3 deploy_to_play.py \
            --bundle app/build/outputs/bundle/release/app-release.aab \
            --track ${_PLAY_TRACK} \
            --package-name ${_PACKAGE_NAME}
        fi
    secretEnv: ['GOOGLE_PLAY_SERVICE_ACCOUNT_KEY']

# 7. ビルド成果物を保存
artifacts:
  objects:
    location: 'gs://${PROJECT_ID}-build-artifacts/${BUILD_ID}'
    paths:
      - 'app/build/outputs/bundle/release/*.aab'
      - 'app/build/outputs/apk/release/*.apk'
      - 'app/build/outputs/mapping/release/mapping.txt'

# Secret Manager で管理するシークレット
availableSecrets:
  secretManager:
    - versionName: projects/${PROJECT_ID}/secrets/keystore-password/versions/latest
      env: 'KEYSTORE_PASSWORD'
    - versionName: projects/${PROJECT_ID}/secrets/key-password/versions/latest
      env: 'KEY_PASSWORD'
    - versionName: projects/${PROJECT_ID}/secrets/firebase-app-id/versions/latest
      env: 'FIREBASE_APP_ID'
    - versionName: projects/${PROJECT_ID}/secrets/google-play-service-account/versions/latest
      env: 'GOOGLE_PLAY_SERVICE_ACCOUNT_KEY'

options:
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100
  timeout: '1800s'

# ビルドトリガー設定例
# GitHub/GitLab/Bitbucket と連携して自動ビルド